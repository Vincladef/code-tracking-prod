name: Deploy Functions

on:
  push:
    branches: [ main, master ]
    paths:
      - 'functions/**'
      - '.github/workflows/deploy-functions.yml'
      - 'firebase.json'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      # Secrets disponibles dans le dépôt
      FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      MAIL_CONFIG_JSON: ${{ secrets.MAIL_CONFIG_JSON }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      GMAIL_APP_PASS: ${{ secrets.GMAIL_APP_PASS }}
      MAIL_FROM: ${{ secrets.MAIL_FROM }}
      # Optionnels (s’ils existent, ils override nos défauts)
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_SECURE: ${{ secrets.MAIL_SECURE }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      MAIL_PASS: ${{ secrets.MAIL_PASS }}
      MAIL_RECIPIENTS: ${{ secrets.MAIL_RECIPIENTS }}
      SUMMARY_RECIPIENTS: ${{ secrets.SUMMARY_RECIPIENTS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Firebase CLI
        run: npm i -g firebase-tools

      - name: Show Firebase CLI version
        run: firebase --version

      - name: Authenticate with Google (Service Account)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Derive Firebase project id from Service Account
        id: project
        shell: bash
        run: |
          # Avoid dependency on jq: use Node.js to read project_id from the JSON secret
          PROJECT_ID=$(node -e '
            try {
              const sa = process.env.FIREBASE_SERVICE_ACCOUNT;
              if (!sa) { process.exit(2); }
              const json = JSON.parse(sa);
              if (!json.project_id) { process.exit(3); }
              process.stdout.write(String(json.project_id));
            } catch (e) { process.exit(4); }
          ')
          if [ -z "$PROJECT_ID" ]; then
            echo "Unable to derive project_id from FIREBASE_SERVICE_ACCOUNT" >&2
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> "$GITHUB_ENV"
          echo "project_id=$PROJECT_ID" >> "$GITHUB_OUTPUT"

      # Install gcloud CLI for API management (uses the same authenticated credentials)
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ steps.project.outputs.project_id }}

      # Facultatif: tentative d'activation de l'API (non bloquante si refusée)
      - name: Ensure Google APIs (best effort, non-blocking)
        run: |
          echo "Best-effort enabling runtimeconfig on project: $PROJECT_ID"
          gcloud services enable runtimeconfig.googleapis.com --project "$PROJECT_ID" || echo "Skip enabling API (insufficient perms or already enabled)"

      - name: Create runtime mail config file (no runtimeconfig API)
        shell: bash
        run: |
          mkdir -p functions
          if [ -n "${MAIL_CONFIG_JSON}" ]; then
            echo "Using MAIL_CONFIG_JSON secret to create functions/mail.runtime.json"
            printf '%s' "${MAIL_CONFIG_JSON}" > functions/mail.runtime.json
          else
            # Valeurs par défaut Gmail si non fournies
            MAIL_HOST=${MAIL_HOST:-smtp.gmail.com}
            MAIL_PORT=${MAIL_PORT:-465}
            MAIL_SECURE=${MAIL_SECURE:-true}
            MAIL_USER=${MAIL_USER:-$GMAIL_USER}
            MAIL_PASS=${MAIL_PASS:-$GMAIL_APP_PASS}

            if [ -z "$MAIL_FROM" ]; then
              echo "MAIL_FROM secret manquant: impossible de préparer la config SMTP." >&2
              exit 1
            fi

            SUMMARY_RECIPIENTS=${SUMMARY_RECIPIENTS:-}
            if [ -z "$SUMMARY_RECIPIENTS" ]; then SUMMARY_RECIPIENTS="$MAIL_RECIPIENTS"; fi
            if [ -z "$SUMMARY_RECIPIENTS" ]; then SUMMARY_RECIPIENTS="$MAIL_FROM"; fi

            echo "Writing functions/mail.runtime.json from individual secrets"
            node -e "const fs=require('fs');const cfg={host:process.env.MAIL_HOST,port:String(process.env.MAIL_PORT||''),secure:String(process.env.MAIL_SECURE||''),user:process.env.MAIL_USER,pass:process.env.MAIL_PASS,from:process.env.MAIL_FROM,recipients:process.env.MAIL_RECIPIENTS||'',summary:{recipients:process.env.SUMMARY_RECIPIENTS||''}};fs.writeFileSync('functions/mail.runtime.json',JSON.stringify(cfg,null,2));console.log('Wrote functions/mail.runtime.json');"
          fi

      - name: Deploy Functions (using Service Account auth)
        run: firebase deploy --only functions --project "$PROJECT_ID"